/**
 * ES234317-Algorithm and Data Structures
 * Semester Ganjil, 2024/2025
 * Group Capstone Project
 * Group #15
 * 1 - 5026231025 - Nabila Rahadatul Aisy Koestriyaningrum
 * 2 - 5026231214 - Michelle Lea Amanda
 */
import javax.swing.*;
import java.awt.*;

public class TicTacToeGUI extends JFrame {
    private TicTacToeGame game;
    private JButton[][] buttons;
    private boolean isVsComputer;

    public TicTacToeGUI(boolean isVsComputer) {
        this.isVsComputer = isVsComputer;
        game = new TicTacToeGame(isVsComputer);
        buttons = new JButton[3][3];

        initializeGUI();
        setVisible(true);
    }

    private void initializeGUI() {
        setTitle("Tic Tac Toe");
        setSize(500, 500);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // Panel papan permainan
        JPanel boardPanel = new JPanel(new GridLayout(3, 3));
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                buttons[i][j] = new JButton("");
                buttons[i][j].setFont(new Font("Arial", Font.BOLD, 40));
                final int row = i;
                final int col = j;
                buttons[i][j].addActionListener(e -> handleButtonClick(row, col));
                boardPanel.add(buttons[i][j]);
            }
        }

        // Tombol reset
        JButton resetButton = new JButton("Reset");
        resetButton.addActionListener(e -> resetGame());

        add(boardPanel, BorderLayout.CENTER);
        add(resetButton, BorderLayout.SOUTH);
    }

    private void handleButtonClick(int row, int col) {
        if (game.makeMove(row, col)) {
            buttons[row][col].setText(String.valueOf(game.getCurrentPlayer()));
            checkGameState();

            if (isVsComputer && game.getCurrentPlayer() == 'O') {
                makeComputerMove(); 
            }
        }
    }

    private void makeComputerMove() {
        SwingUtilities.invokeLater(() -> {
            try {
                Thread.sleep(500); 
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }

            game.makeComputerMove();
            int[] lastMove = game.getLastMove();
            buttons[lastMove[0]][lastMove[1]].setText(String.valueOf(game.getCurrentPlayer()));
            checkGameState();
        });
    }

    private void checkGameState() {
        char winner = game.checkWinner();
        if (winner != ' ') {
            JOptionPane.showMessageDialog(this, "Player " + winner + " wins!");
            resetGame();
        } else if (game.isBoardFull()) {
            JOptionPane.showMessageDialog(this, "It's a draw!");
            resetGame();
        } else {
            game.switchPlayer();
        }
    }

    private void resetGame() {
        game.resetBoard();
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                buttons[i][j].setText("");
            }
        }
    }
}
