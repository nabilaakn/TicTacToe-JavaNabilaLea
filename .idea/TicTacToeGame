/**
 * ES234317-Algorithm and Data Structures
 * Semester Ganjil, 2024/2025
 * Group Capstone Project
 * Group #15
 * 1 - 5026231025 - Nabila Rahadatul Aisy Koestriyaningrum
 * 2 - 5026231214 - Michelle Lea Amanda
 */
public class TicTacToeGame {
    private char[][] board;
    private char currentPlayer;
    private boolean isVsComputer;
    private int[] lastMove;

    public TicTacToeGame(boolean isVsComputer) {
        this.isVsComputer = isVsComputer;
        board = new char[3][3];
        resetBoard();
        currentPlayer = 'X';
        lastMove = new int[]{-1, -1};
    }

    public char getCurrentPlayer() {
        return currentPlayer;
    }

    public void resetBoard() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                board[i][j] = ' ';
            }
        }
        currentPlayer = 'X';
        lastMove = new int[]{-1, -1};
    }

    public boolean makeMove(int row, int col) {
        if (board[row][col] == ' ') {
            board[row][col] = currentPlayer;
            lastMove = new int[]{row, col};
            return true;
        }
        return false;
    }

    public void switchPlayer() {
        currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
    }

    public char checkWinner() {
        // Check rows and columns
        for (int i = 0; i < 3; i++) {
            if (board[i][0] != ' ' && board[i][0] == board[i][1] && board[i][1] == board[i][2])
                return board[i][0];
            if (board[0][i] != ' ' && board[0][i] == board[1][i] && board[1][i] == board[2][i])
                return board[0][i];
        }
        // Check diagonals
        if (board[0][0] != ' ' && board[0][0] == board[1][1] && board[1][1] == board[2][2])
            return board[0][0];
        if (board[0][2] != ' ' && board[0][2] == board[1][1] && board[1][1] == board[2][0])
            return board[0][2];

        return ' '; // No winner yet
    }

    public boolean isBoardFull() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == ' ') return false;
            }
        }
        return true;
    }

    public int[] getLastMove() {
        return lastMove;
    }

    public void makeComputerMove() {
        if (!isVsComputer || currentPlayer != 'O') return;

        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == ' ') {
                    board[i][j] = currentPlayer;
                    lastMove = new int[]{i, j};
                    return;
                }
            }
        }
    }
}

